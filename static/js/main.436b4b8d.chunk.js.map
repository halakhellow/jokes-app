{"version":3,"sources":["images/emoji.png","components/Joke/Joke.js","components/Loader/Loader.js","components/CustomBtn/CustomBtn.js","components/JokesList/JokesList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Joke","votes","this","props","className","onClick","upvote","style","borderColor","getColor","downvote","joke","getEmoji","delete","Component","Loader","CustomBtn","text","handleClick","clearBtn","JokesList","getNewJokes","setState","loading","getJokes","clearJokes","jokes","state","JSON","parse","window","localStorage","getItem","seenJokes","Set","map","length","jokesNum","fetch","headers","Accept","res","json","data","has","push","id","uuidv4","st","setItem","stringify","delta","filter","src","emoji","alt","sort","a","b","key","handleVotes","deleteJoke","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.436b4b8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/emoji.eddfdc8b.png\";","import React, { Component } from \"react\";\r\n\r\nimport \"./Joke.css\";\r\n\r\nclass Joke extends Component {\r\n  getColor() {\r\n    let votes = this.props.votes;\r\n    if (votes >= 15) return \"#4caf50\";\r\n    else if (votes >= 12) return \"#6bc34a\";\r\n    else if (votes >= 9) return \"#cddc39\";\r\n    else if (votes >= 6) return \"#ffeb3b\";\r\n    else if (votes >= 3) return \"#ffc107\";\r\n    else if (votes >= 0) return \"#ff9b00\";\r\n    else return \"#f44336\";\r\n  }\r\n\r\n  getEmoji() {\r\n    let votes = this.props.votes;\r\n    if (votes >= 15) return \"em em-rolling_on_the_floor_laughing\";\r\n    else if (votes >= 12) return \"em em-laughing\";\r\n    else if (votes >= 9) return \"em em-grin\";\r\n    else if (votes >= 6) return \"em em-smiley\";\r\n    else if (votes >= 3) return \"em em-slightly_smiling_face\";\r\n    else if (votes >= 0) return \"em em-face_with_rolling_eyes\";\r\n    else return \"em em-angry\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Joke\">\r\n        <div className=\"Joke-btns\">\r\n          <i className=\"far fa-thumbs-up\" onClick={this.props.upvote}></i>\r\n          <span style={{ borderColor: this.getColor() }}>\r\n            {this.props.votes}\r\n          </span>\r\n          <i className=\"far fa-thumbs-down\" onClick={this.props.downvote}></i>\r\n        </div>\r\n        <div className=\"Joke-text\">{this.props.joke}</div>\r\n        <i className={this.getEmoji()}></i>\r\n        <button onClick={this.props.delete}>&#10006;</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Joke;\r\n","import React from \"react\";\r\n\r\nimport \"./Loader.css\";\r\n\r\nlet Loader = () => {\r\n  return (\r\n    <div className=\"Loader\">\r\n      <i className=\"far fa-8x fa-grin-stars fa-spin\"></i>\r\n      <h1>Loading ...</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\nimport \"./CustomBtn.css\";\r\n\r\nlet CustomBtn = ({ text, handleClick, clearBtn }) => {\r\n  return (\r\n    <button\r\n      onClick={handleClick}\r\n      className={`CustomBtn ${clearBtn && \"clearBtn\"}`}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CustomBtn;\r\n","import React, { Component } from \"react\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport Joke from \"../Joke/Joke\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport CustomBtn from \"../CustomBtn/CustomBtn\";\r\n\r\nimport emoji from \"../../images/emoji.png\";\r\n\r\nimport \"./JokesList.css\";\r\n\r\nclass JokesList extends Component {\r\n  static defaultProps = {\r\n    jokesNum: 10,\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n      loading: false,\r\n    };\r\n    this.seenJokes = new Set(this.state.jokes.map((joke) => joke.text));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.state.jokes.length === 0 && this.getJokes();\r\n  }\r\n\r\n  async getJokes() {\r\n    let jokes = [];\r\n    //while loop is sync and fetch is async => that's why we have to use async await here\r\n    while (jokes.length < this.props.jokesNum) {\r\n      let res = await fetch(\"https://icanhazdadjoke.com/\", {\r\n        headers: { Accept: \"application/json\" },\r\n      });\r\n      let data = await res.json();\r\n      if (!this.seenJokes.has(data.joke))\r\n        jokes.push({ text: data.joke, votes: 0, id: uuidv4() });\r\n    }\r\n    this.setState(\r\n      (st) => ({ loading: false, jokes: [...st.jokes, ...jokes] }),\r\n      () =>\r\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n    );\r\n  }\r\n\r\n  handleVotes(id, delta) {\r\n    this.setState(\r\n      (st) => ({\r\n        jokes: st.jokes.map((joke) =>\r\n          joke.id === id ? { ...joke, votes: joke.votes + delta } : joke\r\n        ),\r\n      }),\r\n      () =>\r\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n    );\r\n  }\r\n\r\n  getNewJokes = () => {\r\n    this.setState({ loading: true }, this.getJokes);\r\n  };\r\n\r\n  deleteJoke(id) {\r\n    this.setState(\r\n      (st) => ({\r\n        jokes: st.jokes.filter((joke) => joke.id !== id),\r\n      }),\r\n      () =>\r\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n    );\r\n  }\r\n\r\n  clearJokes = () => {\r\n    this.setState({ jokes: [] });\r\n  };\r\n\r\n  render() {\r\n    let { loading, jokes } = this.state;\r\n    return loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <div className=\"JokesList\">\r\n        <div className=\"JokesList-aside\">\r\n          <img src={emoji} alt=\"laughing-emoji\" />\r\n          <CustomBtn handleClick={this.getNewJokes} text=\"New Jokes\" />\r\n        </div>\r\n        <div\r\n          className={`JokesList-jokes scrollbar ${\r\n            jokes.length === 0 && \"bg-transparent\"\r\n          }`}\r\n        >\r\n          {jokes.length === 0 && (\r\n            <div className=\"no-jokes\">\r\n              <h1>No Jokes</h1>\r\n              <i className=\"em em-broken_heart\"></i>\r\n              <h3>Fetch new ones</h3>\r\n            </div>\r\n          )}\r\n          <FlipMove>\r\n            {jokes\r\n              .sort((a, b) => b.votes - a.votes)\r\n              .map((joke) => (\r\n                <Joke\r\n                  key={joke.id}\r\n                  votes={joke.votes}\r\n                  joke={joke.text}\r\n                  upvote={() => this.handleVotes(joke.id, 1)}\r\n                  downvote={() => this.handleVotes(joke.id, -1)}\r\n                  delete={() => this.deleteJoke(joke.id)}\r\n                />\r\n              ))}\r\n          </FlipMove>\r\n          {jokes.length !== 0 && (\r\n            <CustomBtn\r\n              clearBtn\r\n              handleClick={this.clearJokes}\r\n              text=\"Clear Jokes\"\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JokesList;\r\n","import React from \"react\";\nimport JokesList from \"./components/JokesList/JokesList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>\n        <span> Dad </span>Jokes\n      </h1>\n      <JokesList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}