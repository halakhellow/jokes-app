{"version":3,"sources":["images/emoji.png","Joke.js","JokesList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Joke","votes","this","props","className","onClick","upvote","style","borderColor","getColor","downvote","joke","getEmoji","Component","JokesList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","text","getNewJokes","bind","length","getJokes","jokesNum","fetch","headers","Accept","res","json","data","has","push","id","uuidv4","setState","st","setItem","stringify","delta","src","emoji","alt","sort","a","b","key","handleVotes","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.900e4340.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/emoji.a4b8080a.png\";","import React, { Component } from \"react\";\r\nimport \"./Joke.css\";\r\n\r\nclass Joke extends Component {\r\n  getColor() {\r\n    let votes = this.props.votes;\r\n    if (votes >= 15) return \"#4caf50\";\r\n    else if (votes >= 12) return \"#6bc34a\";\r\n    else if (votes >= 9) return \"#cddc39\";\r\n    else if (votes >= 6) return \"#ffeb3b\";\r\n    else if (votes >= 3) return \"#ffc107\";\r\n    else if (votes >= 0) return \"#ff9b00\";\r\n    else return \"#f44336\";\r\n  }\r\n\r\n  getEmoji() {\r\n    let votes = this.props.votes;\r\n    if (votes >= 15) return \"em em-rolling_on_the_floor_laughing\";\r\n    else if (votes >= 12) return \"em em-laughing\";\r\n    else if (votes >= 9) return \"em em-smiley\";\r\n    else if (votes >= 6) return \"em em-slightly_smiling_face\";\r\n    else if (votes >= 3) return \"em em-neutral_face\";\r\n    else if (votes >= 0) return \"em em-confused\";\r\n    else return \"em em-angry\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Joke\">\r\n        <div className=\"Joke-btns\">\r\n          <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}></i>\r\n          <span style={{ borderColor: this.getColor() }}>\r\n            {this.props.votes}\r\n          </span>\r\n          <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\r\n        </div>\r\n        <div className=\"Joke-text\">{this.props.joke}</div>\r\n        <i className={this.getEmoji()}></i>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Joke;\r\n","import React, { Component } from \"react\";\r\nimport emoji from \"./images/emoji.png\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Joke from \"./Joke\";\r\nimport \"./JokesList.css\";\r\n\r\nclass JokesList extends Component {\r\n  static defaultProps = {\r\n    jokesNum: 10,\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n      loading: false,\r\n    };\r\n    this.seenJokes = new Set(this.state.jokes.map((joke) => joke.text));\r\n    this.getNewJokes = this.getNewJokes.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.jokes.length === 0) this.getJokes();\r\n  }\r\n\r\n  async getJokes() {\r\n    let jokes = [];\r\n    //while loop is sync and fetch is async => that's why we have to use async await here\r\n    while (jokes.length < this.props.jokesNum) {\r\n      let res = await fetch(\"https://icanhazdadjoke.com/\", {\r\n        headers: { Accept: \"application/json\" },\r\n      });\r\n      let data = await res.json();\r\n      if (!this.seenJokes.has(data.joke))\r\n        jokes.push({ text: data.joke, votes: 0, id: uuidv4() });\r\n    }\r\n    this.setState(\r\n      (st) => ({ loading: false, jokes: [...st.jokes, ...jokes] }),\r\n      () =>\r\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n    );\r\n  }\r\n\r\n  handleVotes(id, delta) {\r\n    this.setState(\r\n      (st) => ({\r\n        jokes: st.jokes.map((joke) =>\r\n          joke.id === id ? { ...joke, votes: joke.votes + delta } : joke\r\n        ),\r\n      }),\r\n      () =>\r\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n    );\r\n  }\r\n\r\n  getNewJokes() {\r\n    this.setState({ loading: true }, this.getJokes);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"loader\">\r\n          <i className=\"far fa-8x fa-laugh fa-spin\"></i>\r\n          <h1>Loading ...</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"JokesList\">\r\n          <div className=\"JokesList-aside\">\r\n            <h1>Dad Jokes</h1>\r\n            <img src={emoji} alt=\"laughing-emoji\" />\r\n            <button onClick={this.getNewJokes}>New Jokes</button>\r\n          </div>\r\n          <div className=\"JokesList-jokes\">\r\n            {this.state.jokes\r\n              .sort((a, b) => b.votes - a.votes)\r\n              .map((joke) => (\r\n                <Joke\r\n                  key={joke.id}\r\n                  votes={joke.votes}\r\n                  joke={joke.text}\r\n                  upvote={() => this.handleVotes(joke.id, 1)}\r\n                  downvote={() => this.handleVotes(joke.id, -1)}\r\n                />\r\n              ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default JokesList;\r\n","import React from \"react\";\nimport JokesList from \"./JokesList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokesList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}